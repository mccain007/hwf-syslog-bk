import forescout_ot_nsm_splunk_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi



import input_module_input_OTSM_REST_hosts as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_input_OTSM_REST_hosts.py
'''
class ModInputinput_OTSM_REST_hosts(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputinput_OTSM_REST_hosts, self).__init__("forescout_ot_nsm_splunk", "input_OTSM_REST_hosts", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputinput_OTSM_REST_hosts, self).get_scheme()
        scheme.title = ("Forescout - OTSM REST - Hosts")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("number_of_hosts_per_interval", title="Number of hosts per interval",
                                         description="Max number of hosts obtained on each interval. Value between 1 and 1000.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("interval_between_host_updates", title="Interval between host updates",
                                         description="After having downloaded all the hosts in the eyeInspect asset inventory, it waits at least the specified number of seconds before querying the CC again to obtain updated information about the hosts.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("global_account", title="Command Center Account",
                                         description="The Command Center account",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("otsm_cc_server", title="OTSM CC Server",
                                         description="Command Center network IP address or hostname",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "forescout-ot-nsm-splunk"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        account_fields.append("global_account")
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputinput_OTSM_REST_hosts().run(sys.argv)
    sys.exit(exitcode)
