{"basic_builder": {"appname": "forescout-ot-nsm-splunk", "friendly_name": "OT Network Security Monitoring", "version": "1.1.1", "author": "Forescout B.V.", "description": "REST services interfaces and syslog inputs for monitoring OT Network Security alerts and logs.", "theme": "#23AAEE", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAECUlEQVRYR+2Xb2hVZRzHP885595z7u6Ya17QaOj+eVeyaNG01OpFYEEGDiZkobSKYtLeLAIhqEgWGoiSEVFvMoxAXxQWibPh8E+lI2nTNmetiLk/qZu6zfvvnHvPE8+5uzV1eL3lpBf3vDm/e37Pee6X7+/7+/6eIyr3XJT8jy6RB5SlGnmGssk1z1CeoWwMZMvfYg1JXCmREgwNXCkQQmTDcFX+lgFypesBKdDhk0cCdI66bO+xby8giUS6EkuHVaU+Jh3J/mGHnSuC1JToPLB3AsPQENw8S/+CoXRJFJhCHdZV+VlXZTLP0jj0Z4Lnj8R5utzHlrogq9vH6R0nJ5ZyBiSlpNgn2XC3ydpKC1OH7tEkH51J0D6cRNcE4TmCr1fOYWPnFb4cSM4uICXarXUWqxeaHDuXYHuvzYmxJJrQPHEqEYf8LodW3cG7JyN82u/MNiCXDdV+WmoCxJOw5484O3+xORuVaFMddWcAOp4sprUrwme/zTIgxYLrutxXovNi2Mfjd5m4QPuQzcd9CU5ddqmbq7P7sSKav5+kbTg1uwz9YxqSVEpSVih4IWx6JTx+weGloxGaF5u01BSw4qvLXLBz86KcRX2tyymRK12FTCgwNAYjLm1PFBJLSp5qj2BotxmQAqhAZS6fkDxT4WMwKjk4klu5vKaY6Qirts9Y2fR4phlwbT4NTuK6oE1jJ9s+mb2vA6Tod1KqfSWGgKQr0TXltulYE6BrKlazSqJ77a5sUs0v4Zmm93xqlqVciU+tl+o9gfrtNcYUqT5d/N2dMzK0LCRoDJuci0sODtmsqTA5OeqwbyjJm/dbTNrQ+lOMzUsLSLiw69cEa8p83qbvdMVousckZGlsOxX3SldepPN5v83y+QY7ehI0VZucjbo0lPm99zd2Rhiz0x42I6D1FToRR9IxkmTzkgJePnqFrQ8G2TeQoLRQp8QU9FxK0VBmsu3nKAKNxkV+2oZsxm14dL6PXf0Jqoo0z8lbfoiwY1kQV8DrP8Z4q9ZiU1eU5rCfLwaS9Ee4MUPrKw2KNdg/4vDqvQGavouyZUmAA4MJnq20mGsKnjuc/pMPe2OcnpQsD2ksDRmM2dLznN2/O9SWwMpSk9eOR3nvoSApJG+ciPF2bYBN3TFeqbbYO+hwZuLqz8LrNFS/QKPvUorecUn9AoOH5xmcj0s6hh1CAY3qIsGBIYfmxRYXbfhmwKGh3IeO4P3euOdJli744HSMxkUWQQO+HXaIJqF+oZ+xuEtrd5ymsJ++CZcj51Un3qBkmRZWU0AJT4lUxel7pldUQnhSVkcLOdWSmbRa5Uk9vcyL00JOM6iWZ3hR8fRD3H82xpyOgzexOA8oG0l5hvIMZWMgWz6voWwM/QWtGvdcoCFQLwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 6}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "forescout:OTSM:REST:links", "interval": "60", "use_external_validation": true, "streaming_mode_xml": true, "name": "input_OTSM_REST_links", "title": "Forescout - OTSM REST - Links", "description": "", "type": "customized", "parameters": [{"name": "number_of_links_per_interval", "label": "Number of links per interval", "help_string": "Max number of links obtained on each interval. Value between 1 and 1000.", "required": true, "format_type": "text", "default_value": "1000", "placeholder": "", "type": "text", "value": "1000"}, {"name": "global_account", "label": "Command Center Account", "help_string": "The Command Center account", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "otsm_cc_server", "label": "OTSM CC Server", "help_string": "Command Center network IP address or hostname", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "number_of_links_per_interval", "title": "Number of links per interval", "description": "Max number of links obtained on each interval. Value between 1 and 1000.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "1000", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Command Center Account", "description": "The Command Center account", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "otsm_cc_server", "title": "OTSM CC Server", "description": "Command Center network IP address or hostname", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "import base64\nimport json\nimport time\nimport sys\nimport splunklib.client as client\nimport splunklib.results as results\n\n\ndef validate_input(helper, definition):\n    number_of_links_per_interval = int(definition.parameters.get(\"number_of_links_per_interval\", 0))\n    if number_of_links_per_interval < 1:\n        raise Exception(\"Number of links per interval must be positive\")\n    if number_of_links_per_interval > 1000:\n        raise Exception(\"Cannot fetch more than 1000 links per interval\")\n\ndef collect_events(helper, ew):\n    helper.log_info(\"START\")\n\n    cc_address = helper.get_arg(\"otsm_cc_server\")\n\n    # create request and header\n    checkpoint_name = \"id_links|{}\".format(cc_address)\n\n    global_account = helper.get_arg(\"global_account\")\n\n    credentials = global_account[\"username\"] + \":\" + global_account[\"password\"]\n    credentials = str(base64.b64encode(credentials.encode(\"utf-8\")))\n    credentials = credentials.replace(\"b'\", \"\").replace(\"='\", \"=\")\n\n    hdr = {\"Authorization\": \"Basic \" + credentials}\n\n    id_min = \"0\"\n    if helper.get_check_point(checkpoint_name) is not None:\n        id_min = int(helper.get_check_point(checkpoint_name)) + 1\n\n    helper.log_info(\"id_min is \" + str(id_min))\n\n    url = \"https://{}/api/v1/links?full=true&sort_ascending=true&id_min={}&limit={}\".format(\n        cc_address, id_min, helper.get_arg(\"number_of_links_per_interval\")\n    )\n\n    try:\n        # send request\n        response = helper.send_http_request(\n            url, \"GET\", headers=hdr, verify=False, use_proxy=False\n        )\n    except:\n        helper.log_info(\"Could not send request: \" + str(sys.exc_info()))\n\n        # skip further processing\n        return \"\"\n\n    try:\n        # load json data from response\n        data = response.json()\n    except:\n        helper.log_info(\n            \"Server response cannot be converted to JSON.\" + str(sys.exc_info())\n        )\n\n        # skip further processing\n        return \"\"\n\n    try:\n        # get total record count\n        records = len(data[\"results\"])\n\n        helper.log_info(\"Server replied \" + str(records) + \" results.\")\n    except:\n        helper.log_info(\"Server reply is malformed.\" + str(sys.exc_info()))\n\n        # skip further processing\n        return \"\"\n\n    i = 0\n\n    # loop through all records, store them in index\n    while i != records:\n        event_data = json.dumps(data[\"results\"][i])\n\n        event = helper.new_event(\n            host=cc_address,\n            time=time.time(),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            data=event_data,\n        )\n\n        ew.write_event(event)\n\n        i += 1\n\n    # store checkpoint\n    if records > 0:\n        id_last = data[\"results\"][-1][\"id\"]\n\n        helper.save_check_point(checkpoint_name, id_last)\n\n        helper.log_info(\"Saved checkpoint with ID: \" + str(id_last))\n    else:\n        helper.log_info(\"Server reply is empty.\")\n\n    helper.log_info(\"Completed successfully!\")\n", "customized_options": [{"name": "number_of_links_per_interval", "value": "1000"}, {"name": "global_account", "value": "account0"}, {"name": "otsm_cc_server", "value": ""}], "uuid": "2b32ff42f4a04967904cd7fd94ee1cfe", "sample_count": 0}, {"index": "default", "sourcetype": "forescout:OTSM:REST:hosts", "interval": "60", "use_external_validation": true, "streaming_mode_xml": true, "name": "input_OTSM_REST_hosts", "title": "Forescout - OTSM REST - Hosts", "description": "", "type": "customized", "parameters": [{"name": "number_of_hosts_per_interval", "label": "Number of hosts per interval", "help_string": "Max number of hosts obtained on each interval. Value between 1 and 1000.", "required": true, "format_type": "text", "default_value": "1000", "placeholder": "", "type": "text", "value": "1000"}, {"name": "interval_between_host_updates", "label": "Interval between host updates", "help_string": "After having downloaded all the hosts in the eyeInspect asset inventory, it waits at least the specified number of seconds before querying the CC again to obtain updated information about the hosts.", "required": true, "format_type": "text", "default_value": "3600", "placeholder": "", "type": "text", "value": "3600"}, {"name": "global_account", "label": "Command Center Account", "help_string": "The Command Center account", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "otsm_cc_server", "label": "OTSM CC Server", "help_string": "Command Center network IP address or hostname", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "number_of_hosts_per_interval", "title": "Number of hosts per interval", "description": "Max number of hosts obtained on each interval. Value between 1 and 1000.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "1000", "placeholder": ""}, {"type": "customized_var", "name": "interval_between_host_updates", "title": "Interval between host updates", "description": "After having downloaded all the hosts in the eyeInspect asset inventory, it waits at least the specified number of seconds before querying the CC again to obtain updated information about the hosts.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "3600", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Command Center Account", "description": "The Command Center account", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "otsm_cc_server", "title": "OTSM CC Server", "description": "Command Center network IP address or hostname", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "import base64\nimport json\nimport time\nimport sys\nimport splunklib.client as client\nimport splunklib.results as results\n\n\ndef validate_input(helper, definition):\n    number_of_hosts_per_interval = int(definition.parameters.get(\"number_of_hosts_per_interval\", 0))\n    if number_of_hosts_per_interval < 1:\n        raise Exception(\"Number of hosts per interval must be positive\")\n    if number_of_hosts_per_interval > 1000:\n        raise Exception(\"Cannot fetch more than 1000 hosts per interval\")\n\n\ndef collect_events(helper, ew):\n    helper.log_info(\"START\")\n\n    cc_address = helper.get_arg(\"otsm_cc_server\")\n\n    checkpoint_host_id = \"id_hosts|{}\".format(cc_address)\n    checkpoint_time_last_group = \"host_group_time|{}\".format(cc_address)\n\n    last_time = 0\n    if helper.get_check_point(checkpoint_time_last_group) is not None:\n        last_time = helper.get_check_point(checkpoint_time_last_group)\n\n    current_time = time.time()\n    helper.log_info(f\"current_time is {current_time}, last_time is {last_time}\")\n\n    if current_time < last_time + int(helper.get_arg(\"interval_between_host_updates\")):\n        helper.log_info(\"Not enough time passed since all the hosts were updated. \"\n                        \"Skipping this iteration. Current time is {}.\".format(current_time))\n        return \"\"\n\n    global_account = helper.get_arg(\"global_account\")\n\n    credentials = global_account[\"username\"] + \":\" + global_account[\"password\"]\n    credentials = str(base64.b64encode(credentials.encode(\"utf-8\")))\n    credentials = credentials.replace(\"b'\", \"\").replace(\"='\", \"=\")\n\n    hdr = {\"Authorization\": \"Basic \" + credentials}\n\n    id_min = \"0\"\n    if helper.get_check_point(checkpoint_host_id) is not None:\n        id_min = int(helper.get_check_point(checkpoint_host_id)) + 1\n\n    number_hosts = int(helper.get_arg(\"number_of_hosts_per_interval\"))\n\n    helper.log_info(f\"id_min is {id_min}, number of hosts is {number_hosts}\")\n\n    # Number of hosts to fetch\n\n    url = \"https://{}/api/v1/hosts?full=true&sort_ascending=true&id_min={}&limit={}\".format(\n        cc_address, id_min, number_hosts\n    )\n\n    try:\n        # send request\n        response = helper.send_http_request(\n            url, \"GET\", headers=hdr, verify=False, use_proxy=False\n        )\n    except:\n        helper.log_info(\"Could not send request:\" + str(sys.exc_info()))\n\n        # skip further processing\n        return \"\"\n\n    try:\n        # load json data from response\n        data = response.json()\n    except:\n        helper.log_info(\n            \"Server response cannot be converted to JSON.\" + str(sys.exc_info())\n        )\n\n        # skip further processing\n        return \"\"\n\n    try:\n        # get total record count\n        records = len(data[\"results\"])\n\n        helper.log_info(\"Server replied \" + str(records) + \" results.\")\n    except:\n        helper.log_info(\"Server reply is malformed.\" + str(sys.exc_info()))\n\n        # skip further processing\n        return \"\"\n\n    i = 0\n\n    # loop through all records, store them in index\n    while i != records:\n        event_data = json.dumps(data[\"results\"][i])\n\n        event = helper.new_event(\n            host=cc_address,\n            time=time.time(),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            data=event_data,\n        )\n\n        ew.write_event(event)\n\n        i += 1\n\n    # store checkpoint\n    if records == number_hosts:\n        id_last = data[\"results\"][-1][\"id\"]\n\n        helper.save_check_point(checkpoint_host_id, id_last)\n\n        helper.log_info(\"Saved checkpoint with ID: \" + str(id_last))\n\n    else:\n        helper.delete_check_point(checkpoint_host_id)\n\n        helper.save_check_point(checkpoint_time_last_group, current_time)\n\n        helper.log_info(\"Resetting checkpoint. Epoch when finishing updating the group is {}\".format(current_time))\n\n    helper.log_info(\"Completed successfully!\")\n", "customized_options": [{"name": "number_of_hosts_per_interval", "value": "1000"}, {"name": "interval_between_host_updates", "value": "3600"}, {"name": "global_account", "value": "account0"}, {"name": "otsm_cc_server", "value": ""}], "uuid": "34097d4f881e428686fc00b0a881aaac", "sample_count": 0}]}, "field_extraction_builder": {"forescout:OTSM:REST:links": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:logs:health": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:logs:useractivity": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:REST:hosts": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:logs:alert": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:logs:network": {"data_format": "json", "is_parsed": true}, "forescout:OTSM:logs:sink": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"forescout:OTSM:REST:hosts": {"metadata": {"event_count": 0, "data_input_name": "input_OTSM_REST_hosts", "extractions_count": 0, "cims_count": 0}}, "forescout:OTSM:REST:links": {"metadata": {"event_count": 0, "data_input_name": "input_OTSM_REST_links", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1643969753_16", "progress": 0.7857142857142857}}