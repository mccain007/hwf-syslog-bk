#
# Copyright (C) 2014-2017 NetFlow Logic
# All rights reserved.
# 
# These coded instructions and statements contain unpublished trade
# secrets and proprietary information. They are protected by federal
# copyright law and by trade secret law, and may not be disclosed to
# third parties or used, copied, reverse engineered, decompiled, or
# duplicated in any form, in whole or in part, without the prior
# written consent of NetFlow Logic.
# 

[netflow_index]
definition = sourcetype=flowintegrator

[netflow_search_rule_20003]
definition = `netflow_index` nfc_id=20003 

[netflow_search_rule_20180]
definition = `netflow_index` nfc_id=20180

[netflow_search_rule_20181]
definition = `netflow_index` nfc_id=20181

[netflow_search_rule_20183]
definition = `netflow_index` nfc_id=20183

[netflow_search_rule_20184]
definition = `netflow_index` nfc_id=20184

[netflow_search_rule_20186]
definition = `netflow_index` nfc_id=20186

[netflow_search_rule_20187]
definition = `netflow_index` nfc_id=20187

[formatbytes(1)]
args = bytes
definition = case($bytes$ > 1073741824, tostring(round($bytes$/1073741824,2))+" GB",    \
                $bytes$ > 1048576, tostring(round($bytes$/1048576,2))+" MB",            \
                $bytes$ > 1024, tostring(round($bytes$/1024))+" KB",                    \
                $bytes$ <= 1024, tostring($bytes$)+" Bytes")

[formatpackets(1)]
args = packets
definition = case($packets$ > 1000000000, tostring(round($packets$/1000000000,1))+ " G",     \
                  $packets$ > 1000000, tostring(round($packets$/1000000,1))+ " M",           \
                  $packets$ > 1000, tostring(round($packets$/1000,1))+ " K",                 \
                  $packets$ <= 1000, tostring($packets$))

[formatbps(1)]
args = bps
definition = case($bps$ > 1000000000, tostring(round($bps$/1000000000,2))+" Gbps",      \
                $bps$ > 1000000, tostring(round($bps$/1000000,2))+" Mbps",              \
                $bps$ > 1000, tostring(round($bps$/1000,2))+" Kbps", $bps$ <=1000, tostring(ceil($bps$))+" bps")

[formatpps(1)]
args = pps
definition = case($pps$ > 1000000000, tostring(round($pps$/1000000000,2))+" Gpps",      \
                $pps$ > 1000000, tostring(round($pps$/1000000,2))+" Mpps",              \
                $pps$ > 1000, tostring(round($pps$/1000,2))+" Kpps",                    \
                $pps$ <=1000, tostring(ceil($pps$))+" pps")

[average_speed(2)]
args = result, expression
definition = eval $result$ = ($expression$) / (max_time - (min_time - 1))

[get_iface_name(2)]
args = result, param
definition =  join type=left exp_ip $param$ [ search `netflow_search_rule_20003` earliest=-24h latest=now()                 \
                | eval $param$ = ifIndex | eval exp_ip = mgmt_ip                                                            \
                | stats latest(ifName) as SNMPIfaceName$param$ by exp_ip $param$ ]                                          \
              | eval SNMPIfaceName$param$ = if(isnull(SNMPIfaceName$param$), $param$, SNMPIfaceName$param$)                 \
              | eval $result$ = if(isnull($result$), SNMPIfaceName$param$, $result$)

[get_iface_speed(2)]
args = result, param
definition =  join type=left exp_ip $param$ [ search `netflow_search_rule_20003` earliest=-24h latest=now()                 \
                | eval $param$ = ifIndex  | eval exp_ip = mgmt_ip                                                           \
                | stats latest(ifSpeed) as SNMPIfaceSpeed$param$ by exp_ip $param$ ]                                        \
             | eval SNMPIfaceSpeed$param$ = if(isnull(SNMPIfaceSpeed$param$), $param$, SNMPIfaceSpeed$param$)               \
             | eval $result$ = if(isnull($result$), SNMPIfaceSpeed$param$, $result$)

[get_exporter_name(1)]
args = result
definition = join type=left exp_ip [ search `netflow_search_rule_20003` earliest=-24h latest=now()                          \
                | eval exp_ip = mgmt_ip                                                                                     \
                | stats latest(sysName) as SNMPDeviceName by exp_ip ]                                                       \
            | eval exp_ip_name_snmp = if(isnull(deviceName), exp_ip, deviceName)                                            \
            | eval exp_ip_name_snmp = if((exp_ip_name_snmp==exp_ip), exp_ip, exp_ip." (".exp_ip_name_snmp.")")              \
            | eval $result$ = if(isnull(exp_ip_name_snmp), exp_ip, exp_ip_name_snmp)

[commas_formatting(3)]
args = result, amount, decimals
definition = eval "$result$" = round($amount$,$decimals$) | fieldformat "$result$" = tostring('$result$',"commas")

[per_second_chart(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ \
            | timechart limit=10 $timechart_expr$ useother="f" \
            | foreach * fieldstr="#FIELD#" \
                [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

#
# NetOps Path App
#
[netops_path_vm_pairs(6)]
args = filter_name, filter_ip, vtep_ip, vxlan_id, dev_ip, dev_iface
definition = \
`netflow_index` nfc_id=20183 \
(src_ip="*$filter_ip$*" OR dest_ip="*$filter_ip$*") \
(src_vm_name="*$filter_name$*" OR src_name="*$filter_name$*" OR dest_vm_name="*$filter_name$*" OR dest_name="*$filter_name$*") \
| fillnull value="" src_vtep_ip dest_vtep_ip src_vxlan_id dest_vxlan_id \
| search (src_vtep_ip="*$vtep_ip$*" OR dest_vtep_ip="*$vtep_ip$*") (src_vxlan_id="*$vxlan_id$*" OR dest_vxlan_id="*$vxlan_id$*") \
| where like(nodes, "%$dev_ip$%$dev_iface$%") \
| fillnull value="255.255.255.255" src_vhost_ip dest_vhost_ip \
| fillnull value=unknown src_vm_name src_name src_vhost_name dest_vm_name dest_name dest_vhost_name \
| stats sum(bytes) as total_bytes by src_ip src_type src_vm_name src_vhost_ip src_name src_vhost_name dest_ip dest_type dest_vm_name dest_vhost_ip dest_name dest_vhost_name \
| sort - total_bytes | head 500

[netops_path_vms_affected_by_health(3)]
args = filter_health, dev_ip, dev_iface
definition = \
`netflow_index` nfc_id=20183 \
[ \
    search `netflow_index` nfc_id=20180 device_type!="vds" \
    | where device_health_score<$filter_health$ \
    | dedup device | fields + device \
    | rename device as search | format \
] \
| where like(nodes, "%$dev_ip$%$dev_iface$%") \
| eval search=src_ip+";"+dest_ip | makemv delim=";" search | mvexpand search \
| dedup search | table search

[interfaces_with_low_health(1)]
args = filter_health
definition = \
`netflow_index` nfc_id=20181 if_health_score<$filter_health$ \
| dedup device snmp_ifName \
| rename snmp_ifName as ifName \
| rename if_health_score as health_score \
| table _time device ifName health_score

[netops_path_mono_directed(3)]
args = src_ip, dest_ip, direction
definition = \
`netflow_search_rule_20183` src_ip="$src_ip$" dest_ip="$dest_ip$" \
| eval direction="$direction$" \
| fillnull value="255.255.255.255" src_vhost_ip dest_vhost_ip \
| fillnull value=unknown src_vm_name src_name src_vhost_name dest_vm_name dest_name dest_vhost_name \
| stats sum(bytes) as traffic by src_ip src_type src_vm_name src_vhost_ip src_name src_vhost_name dest_ip dest_type dest_vm_name dest_vhost_ip dest_name dest_vhost_name nodes resolved direction

[netops_path_bi_directed(2)]
args = src_ip, dest_ip
definition = \
`netflow_search_rule_20183` src_ip="$src_ip$" dest_ip="$dest_ip$" \
| eval direction="straight" \
| fillnull value="255.255.255.255" src_vhost_ip dest_vhost_ip \
| fillnull value=unknown src_vm_name src_name src_vhost_name dest_vm_name dest_name dest_vhost_name \
| stats sum(bytes) as traffic by src_ip src_type src_vm_name src_vhost_ip src_name src_vhost_name dest_ip dest_type dest_vm_name dest_vhost_ip dest_name dest_vhost_name nodes resolved direction \
| append [ \
    search `netflow_search_rule_20183` src_ip="$dest_ip$" dest_ip="$src_ip$" \
    | eval direction="backward" \
    | fillnull value="255.255.255.255" src_vhost_ip dest_vhost_ip \
    | fillnull value=unknown src_vm_name src_name src_vhost_name dest_vm_name dest_name dest_vhost_name \
    | stats sum(bytes) as traffic by src_ip src_type src_vm_name src_vhost_ip src_name src_vhost_name dest_ip dest_type dest_vm_name dest_vhost_ip dest_name dest_vhost_name nodes resolved direction \
]

[netops_path_get_health(1)]
args = x180_devices
definition = \
`netflow_search_rule_20181` $x180_devices$ \
| rename snmp_ifName as snmp_if_name \
| stats min(if_health_score) as min_if_health_score \
        latest(if_health_score) as latest_if_health_score \
        max(if_failure_risk) as max_if_failure_risk \
        latest(if_failure_risk) as latest_if_failure_risk \
        latest(r_load) as latest_if_r_load \
        latest(r_rate) as latest_if_r_rate \
        sum(bytes_in) as sum_bytes_in \
        sum(bytes_out) as sum_bytes_out \
        sum(packets_in) as sum_packets_in \
        sum(packets_out) as sum_packets_out \
        by device snmp_index snmp_if_name \
| join device [ \
    search `netflow_search_rule_20180` \
    | stats min(device_health_score) as min_health_score by device device_type \
] \
| eval sum_bytes_in = `formatbytes(sum_bytes_in)` \
| eval sum_bytes_out =  `formatbytes(sum_bytes_out)` \
| eval sum_packets_in = `formatpackets(sum_packets_in)` \
| eval sum_packets_out = `formatpackets(sum_packets_out)` \
| eval min_if_health_score = if(device_type="vds", "N/A", min_if_health_score) \
| eval latest_if_health_score = if(device_type="vds", "N/A", latest_if_health_score) \
| eval max_if_failure_risk = if(device_type="vds", "N/A", max_if_failure_risk) \
| eval latest_if_failure_risk = if(device_type="vds", "N/A", latest_if_failure_risk) \
| eval min_health_score = if(device_type="vds", "N/A", min_health_score)

#
# NetOps Health App
#
[netops_health_search_query(1)]
args = health
definition = `netflow_search_rule_20181` if_health_score <= $health$                        \
    | stats sum(bytes_in) as TrafficIn,                                                     \
            sum(bytes_out) as TrafficOut,                                                   \
            sum(packets_in) as PacketsIn,                                                   \
            sum(packets_out) as PacketsOut,                                                 \
            latest(if_health_score) as if_health_score,                                     \
            latest(if_health_trend) as if_health_trend,                                     \
            latest(r_load) as latest_r_load,                                                \
            latest(r_rate) as latest_r_rate,                                                \
            latest(snmp_ifName) as snmp_ifName                                              \
                by device snmp_index                                                        \
    | eval exp_ip = device                                                                  \
    | eval TrafficIn = `formatbytes(TrafficIn)`                                             \
    | eval TrafficOut = `formatbytes(TrafficOut)`                                           \
    | eval PacketsIn = `formatpackets(PacketsIn)`                                           \
    | eval PacketsOut = `formatpackets(PacketsOut)`                                         \
    | `get_iface_name(if_name, snmp_index)`                                                 \
    | `get_exporter_name(exp_ip_name)`                                                      \
    | eval if_name = if(isnull(if_name),                                                    \
                        if(isnotnull(snmp_ifName), snmp_ifName, snmp_index),                \
                     if(if_name==snmp_index,                                                \
                        if(isnotnull(snmp_ifName), snmp_ifName, snmp_index), if_name))      \
    | join device [ search `netflow_search_rule_20180`                                      \
                        | stats latest(device_health_score) as dev_health_score             \
                                latest(device_type) as device_type                          \
                                latest(device_health_trend) as dev_health_trend by device ] \
    | join device [ search `netflow_search_rule_20181`                                      \
                            | stats dc(snmp_index) as ifaces_n by device ]                  \
    | sort device if_health_score                                                           \
    | eval if_health_score = if(device_type="vds", "N/A", if_health_score)                  \
    | eval if_health_trend = if(device_type="vds", "N/A", if_health_trend)                  \
    | eval dev_health_score = if(device_type="vds", "N/A", dev_health_score)                \
    | eval dev_health_trend =  if(device_type="vds", "N/A", dev_health_trend)

[netops_health_rows_for_graph]
definition = table ifaces_n, device, exp_ip_name, device_type, dev_health_score, dev_health_trend, \
                snmp_index, if_name,TrafficIn, TrafficOut, PacketsIn, PacketsOut, if_health_score, \
                if_health_trend, latest_r_load, latest_r_rate
