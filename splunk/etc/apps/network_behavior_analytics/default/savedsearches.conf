[AlphaSOC NBA - New threats]
action.email.useNSSubject = 1
action.slack.param.message = Network Behavior Analytics alert for $result.source$: $result.top_threat$ (severity $result.severity$)
action.snow_incident.param.category = Network
action.snow_incident.param.short_description = Network Behavior Analytics alert for $result.source$: $result.top_threat$ (severity $result.severity$)

alert.digest_mode = False
alert.suppress = 1
alert.suppress.fields = source,severity
alert.suppress.period = 4h
alert.track = 0

action.email.inline = 1
action.email.message.alert = Please review the AlphaSOC alert below, including a link to the original event in Splunk.\
( + checkboxes selected for link to results, inline table, and CSV attached)
action.email.sendcsv = 1
action.email.sendresults = 1
action.email.subject.alert = Network Behavior Analytics Alert for $result.source$: $result.top_threat$ (severity $result.severity$)

cron_schedule = */5 * * * *
dispatch.earliest_time = -5m
enableSched = 0

auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
quantity = 0
relation = greater than

display.events.fields = ["host","source","sourcetype","show","threats","title","severity"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics

request.ui_dispatch_app = network_behavior_analytics
request.ui_dispatch_view = search

search = `nbaeventsindex` type=alert threats=* | mvexpand threats | eval group=mvjoin(mvsort(if(isnull(src_groups), "-", src_groups)), ", ") | lookup asocnbathreats name AS threats OUTPUT title, severity, show, policy | eval show=if(isnull(show), 1, show) | eval policy=if(isnull(policy), 0, policy) | search show=1 policy=0 severity>=2 | eval c_time=strftime(strptime(original_event, "%d-%b-%Y %H:%M:%S%z"), "%d-%b-%Y %H:%M:%S") | eval alert_source=if(isnull(src_disp) or src_disp=="", src_ip, src_disp) | sort 0 -severity | streamstats count by alert_source, group | stats latest(c_time) AS "time", dc(title) AS "total_threats", list(eval(if(count<=1,title,null()))) AS "top_threat", max(severity) AS "severity" by alert_source, group | rename alert_source AS source | sort by -severity, -time

[AlphaSOC NBA - New violations]
action.email.useNSSubject = 1
action.slack.param.message = Network Behavior Analytics alert for $result.source$: $result.top_threat$ (severity $result.severity$)
action.snow_incident.param.category = Network
action.snow_incident.param.short_description = Network Behavior Analytics alert for $result.source$: $result.top_threat$ (severity $result.severity$)

alert.digest_mode = False
alert.suppress = 1
alert.suppress.fields = source,severity
alert.suppress.period = 4h
alert.track = 0

action.email.inline = 1
action.email.message.alert = Please review the AlphaSOC alert below, including a link to the original event in Splunk.\
( + checkboxes selected for link to results, inline table, and CSV attached)
action.email.sendcsv = 1
action.email.sendresults = 1
action.email.subject.alert = Network Behavior Analytics Alert for $result.source$: $result.top_threat$ (severity $result.severity$)

cron_schedule = */5 * * * *
dispatch.earliest_time = -5m
enableSched = 0

auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
quantity = 0
relation = greater than

display.events.fields = ["host","source","sourcetype","show","threats","title","severity"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics

request.ui_dispatch_app = network_behavior_analytics
request.ui_dispatch_view = search

search = `nbaeventsindex` type=alert threats=* | mvexpand threats | eval group=mvjoin(mvsort(if(isnull(src_groups), "-", src_groups)), ", ") | lookup asocnbathreats name AS threats OUTPUT title, severity, show, policy | eval show=if(isnull(show), 1, show) | eval policy=if(isnull(policy), 0, policy) | search show=1 policy=1 severity>=0 | eval c_time=strftime(strptime(original_event, "%d-%b-%Y %H:%M:%S%z"), "%d-%b-%Y %H:%M:%S") | eval alert_source=if(isnull(src_disp) or src_disp=="", src_ip, src_disp) | sort 0 -severity | streamstats count by alert_source, group | stats latest(c_time) AS "time", dc(title) AS "total_threats", list(eval(if(count<=1,title,null()))) AS "top_threat", max(severity) AS "severity" by alert_source, group | rename alert_source AS source | sort by -severity, -time

[Threat - AlphaSOC NBA - Threat Hunter - Rule]
enableSched = 0
cron_schedule = */5 * * * *

counttype = number of events
quantity = 0
relation = greater than

dispatch.earliest_time = -5m
dispatch.latest_time = now

request.ui_dispatch_app = network_behavior_analytics
request.ui_dispatch_view = search

alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = src,desc
alert.suppress.period = 4h
alert.track = 0

action.correlationsearch.enabled = 1
action.correlationsearch.label = AlphaSOC NBA - Alerts - Threat Hunter

action.notable = 1
action.notable.param.drilldown_name = Show alerts for $src$
action.notable.param.drilldown_search = sourcetype="asoc:nba:event" | where (src_disp="$src$" or src_ip="$src_ip$")
action.notable.param.rule_description = Threat detected for $src$ ($src_user_group$). Attached threats: $desc$.
action.notable.param.rule_title = $subject$
action.notable.param.security_domain = threat
action.notable.param.verbose = 0
action.notable.param.drilldown_earliest_offset = 600
action.notable.param.drilldown_latest_offset = 600

search = `nbaeventsindex` type=alert threats=* | mvexpand threats | eval src_user_group=mvjoin(mvsort(if(isnull(src_groups), "-", src_groups)), ", ") | lookup asocnbathreats name AS threats OUTPUT title, severity, show, policy | eval show=if(isnull(show), 1, show) | eval policy=if(isnull(policy), 0, policy) | search show=1 policy=0 severity>=2 | eval c_time=strftime(strptime(original_event, "%d-%b-%Y %H:%M:%S%z"), "%d-%b-%Y %H:%M:%S") | eval alert_source=if(isnull(src_disp) or src_disp=="", src_ip, src_disp) | sort 0 -severity | streamstats count by alert_source, src_user_group | stats values(app) AS app, latest(c_time) AS "modtime", dc(title) AS "size", max(severity) AS severity_id, values(src_ip) AS src_ip, values(threats) AS desc, list(eval(if(count<=1,title,null()))) AS subject by alert_source, src_user_group | eval severity=case(severity_id == 2, "low", severity_id == 3, "medium", severity_id == 4, "high", severity_id == 5, "critical", true(), "informational") | eval priority="medium" | eval category="Threat Hunter" | rename alert_source as src

[Threat - AlphaSOC NBA - Policy Violations - Rule]
enableSched = 0
cron_schedule = */5 * * * *

counttype = number of events
quantity = 0
relation = greater than

dispatch.earliest_time = -5m
dispatch.latest_time = now

request.ui_dispatch_app = network_behavior_analytics
request.ui_dispatch_view = search

alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = src,desc
alert.suppress.period = 4h
alert.track = 0

action.correlationsearch.enabled = 1
action.correlationsearch.label = AlphaSOC NBA - Alerts - Policy Violations

action.notable = 1
action.notable.param.drilldown_name = Show alerts for $src$
action.notable.param.drilldown_search = sourcetype="asoc:nba:event" | where (src_disp="$src$" or src_ip="$src_ip$")
action.notable.param.rule_description = Policy violation detected for $src$ ($src_user_group$). Attached threats: $desc$.
action.notable.param.rule_title = $subject$
action.notable.param.security_domain = threat
action.notable.param.verbose = 0
action.notable.param.drilldown_earliest_offset = 600
action.notable.param.drilldown_latest_offset = 600

search = `nbaeventsindex` type=alert threats=* | mvexpand threats | eval src_user_group=mvjoin(mvsort(if(isnull(src_groups), "-", src_groups)), ", ") | lookup asocnbathreats name AS threats OUTPUT title, severity, show, policy | eval show=if(isnull(show), 1, show) | eval policy=if(isnull(policy), 0, policy) | search show=1 policy=1 severity>=0 | eval c_time=strftime(strptime(original_event, "%d-%b-%Y %H:%M:%S%z"), "%d-%b-%Y %H:%M:%S") | eval alert_source=if(isnull(src_disp) or src_disp=="", src_ip, src_disp) | sort 0 -severity | streamstats count by alert_source, src_user_group | stats values(app) AS app, latest(c_time) AS "modtime", dc(title) AS "size", max(severity) AS severity_id, values(src_ip) AS src_ip, values(threats) AS desc, list(eval(if(count<=1,title,null()))) AS subject by alert_source, src_user_group | eval severity=case(severity_id == 2, "low", severity_id == 3, "medium", severity_id == 4, "high", severity_id == 5, "critical", true(), "informational") | eval priority="medium" | eval category="Policy Violations" | rename alert_source as src
